/**
class BinaryTree{
    public Node root;

    public Node insert(Node root, int data){
        if(root == null){
            return new Node(data);
        }else if(data > root.data){
            root.right = insert(root.right,data);
            return root;
        }else{
            root.left = insert(root.left,data);
            return root;
        }
    } 
    public int height(Node root, int data){
        if(root.data == data)return 0;
        else if(data>root.data){
            return 1 + height(root.right,data);
        }
        return 1 + height(root.left,data);
    }
    public Boolean search(Node root, int data){
        if(root == null){
            return false;
        }
        if(root.data == data){
            return true;
        }else if(data > root.data ){
            return search(root.right,data);
        }else{
            return search(root.left,data);
        }
    }
    public int maxValue(Node root){
        if(root == null){
            return -1;
        }
        if(root.right == null){
            return root.data;
        }else{
            return maxValue(root.right);
        }
    }
    
}
class Node{
    int data;
    Node left;
    Node right;
    Node(int d){
        this.data = d;
    }
 
    
    
}
*     Node r = new Node(10);
        BinaryTree t1 = new BinaryTree();
        t1.root = r;
        t1.insert(r,20);
        t1.insert(r,-5);
        t1.insert(r, 1000);
        System.out.println(t1.search(r, 20));
* **/
